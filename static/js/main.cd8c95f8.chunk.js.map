{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebaseConfig","firebase","initializeApp","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImage","console","log","className","map","motion","div","key","whileHover","opacity","layout","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImage","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","SetError","allowedFileTypes","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd8c95f8.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\nimport configData from \"./configData.json\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = configData;\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };\r\n","import { useEffect, useState } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n        .orderBy('createdAt', 'desc')\r\n        .onSnapshot(snap => {\r\n            let documents = [];\r\n            snap.forEach(doc => {\r\n                documents.push(\r\n                    {...doc.data(), id: doc.id}\r\n                )\r\n            });\r\n            setDocs(documents);\r\n        });\r\n\r\n        return () => unsub();\r\n\r\n    }, [collection]);\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({ setSelectedImage }) => {\r\n\r\n    const { docs } = useFirestore('images');\r\n\r\n    console.log(docs);\r\n\r\n    return ( <div className=\"img-grid\">\r\n        {docs && docs.map((doc) => \r\n        <motion.div className='img-wrap' key={doc.id}\r\n            whileHover={{ opacity: 1}}\r\n            layout\r\n            onClick={() => setSelectedImage(doc.url)}\r\n        >\r\n            <motion.img src={doc.url} alt=\"uploaded image\" \r\n             initial={{opacity:0}}\r\n             animate={{opacity:1}}\r\n             transition={{delay:1}}\r\n            />\r\n        </motion.div>\r\n        )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ( {selectedImage, setSelectedImage} ) => {\r\n    const handleClick = (e) => {\r\n        if (e.target.classList.contains('backdrop')){\r\n            setSelectedImage(null);\r\n        }\r\n    }\r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n            initial={{opacity:0}}\r\n            animate={{opacity:1}}\r\n        >\r\n            <motion.img src={selectedImage} alt=\"enlarged pic\" \r\n            initial={{y:\"-100vh\"}}\r\n            animate={{y:0}}\r\n            />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\r\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection(\"images\");\r\n        storageRef.put(file).on(\r\n            \"state_changed\",\r\n            (snap) => {\r\n                let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n                setProgress(percentage);\r\n            },\r\n            (err) => {\r\n                setError(err);\r\n            },\r\n            async () => {\r\n                const url = await storageRef.getDownloadURL();\r\n                const createdAt = timestamp();\r\n                collectionRef.add({\r\n                    url,\r\n                    createdAt,\r\n                });\r\n                setUrl(url);\r\n            }\r\n        );\r\n    }, [file]);\r\n\r\n    return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile]);\r\n    return (\r\n        <motion.div\r\n            className=\"progress-bar\"\r\n            initial={{ width: 0 }}\r\n            animate={{ width: progress + \"%\" }}\r\n        ></motion.div>\r\n    );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n\r\n    const [error, SetError] = useState(null);\r\n\r\n    const allowedFileTypes = [\"image/png\", \"image/jpeg\", \"image/jpg\"];\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        if (selected && allowedFileTypes.includes(selected.type)) {\r\n            setFile(selected);\r\n            SetError(\"\");\r\n        } else {\r\n            setFile(null);\r\n            SetError(\"Please select an image file of the (png or jpeg)\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form>\r\n            <label>\r\n                <input type=\"file\" onChange={changeHandler}></input>\r\n                <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                {error && <div className=\"error\">{error}</div>}\r\n                {file && <div className=\"filename\">{file.name}</div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React from \"react\";\nimport ImageGrid from \"./comps/ImageGrid\";\nimport Modal from \"./comps/Modal\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\nimport { useState } from \"react\";\n\nfunction App() {\n    const [ selectedImage, setSelectedImage ] = useState(null);\n    return (\n        <div className=\"App\">\n            <Title />\n            <UploadForm />\n            <ImageGrid setSelectedImage={setSelectedImage}/>\n            { selectedImage  && <Modal selectedImage={selectedImage} setSelectedImage={setSelectedImage} />}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serve -s build -p 8888\n"],"sourceRoot":""}